package text

import (
	"fmt"
	"time"

	"gdg-kld.ru/telecomma/user"
)

const (
	top = `–í–æ—Ç —Å–∞–º—ã–µ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–±—è—Ç–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:

%s

–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞: %s

–£—Å–ø–µ–π—Ç–µ –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø –¥–æ –∫–æ–Ω—Ü–∞ –∫–æ–Ω—Ñ—ã`
	LookAtTop = `–ü–æ—Ñ–∏–∫—Å–∏–ª, —Ç–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ

(üëç‚âñ‚Äø‚Äø‚âñ)üëç /top`
	stats = `
–í–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ "–•–æ—á—É –ø–æ–æ–±—â–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –∫–æ–Ω—Ñ—ã"
–í—ã —Å–æ–≤–ø–∞–ª–∏ c: %d
%s
–° –≤–∞–º–∏ —Ö–æ—Ç—è—Ç –ø–æ–æ–±—â–∞—Ç—å—Å—è: %d
%s`
	finalMessage = `–ü—Ä–∏–≤–µ—Ç! –ú–æ—ë (–±–æ—Ç–∞) –ø–æ—Å–º–µ—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –±–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –ü–æ–∫–∞ –≤—ã –µ—â—ë –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–µ–º-—Ç–æ

–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –Ω–∞–∂–∞–≤ –Ω–∞ —Ç–µ–≥ #contact
%s
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å –ø–æ—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å –∏ –∑–∞–ø–∏–ª–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –º–∏—Ç–∞–ø–æ–≤, —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤ –∏ —Ñ–µ—Å—Ç–æ–≤ —Ç—É—Ç
github.com/GDG-Kaliningrad-devs/telecomma
–ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–π—Ç–µ issue "what to do"

 ï‚Ä¢ÃÅ·¥•‚Ä¢ÃÄ î„Å£‚ô°`
)

func Top(list user.StatList, t time.Time) string {
	results := ""

	for _, stat := range list {
		results += fmt.Sprintf(
			"%d - %s, @%s, –∑–Ω–∞–∫–æ–º—Å—Ç–≤: %d, fakes: %d\n",
			stat.Place, stat.Name, stat.UserName, len(stat.Contacts), stat.FakeAcceptsCount,
		)
	}

	return fmt.Sprintf(top, results, t.Format("15:04"))
}

func Final(contacts []user.ContactStatus) string {
	var (
		matchesCount    uint
		matches         string
		interestedCount uint
		interested      string
	)

	for _, contact := range contacts {
		switch contact.MatchStatus {
		case user.Match:
			matches += contact.User.String() + "\n"
			matchesCount++

		case user.InterestedInMe:
			interested += contact.User.String() + "\n"
			interestedCount++

		case user.Nothing:
		}
	}

	if len(matches) == 0 && len(interested) == 0 {
		return fmt.Sprintf(finalMessage, "")
	}

	statStr := fmt.Sprintf(
		stats,
		matchesCount, matches,
		interestedCount, interested,
	)

	return fmt.Sprintf(finalMessage, statStr)
}
